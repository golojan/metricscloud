import React, { useEffect } from 'react';
import {
  SchoolStats,
  StudentStats,
  SchoolInfo,
  AuthUserInfo,
} from '@metricsai/metrics-interfaces';

import { Dispatch, RootState } from '@metricsai/metrics-store';
import { useDispatch, useSelector } from 'react-redux';
import { div, perc } from '@metricsai/metrics-utils';
import useSWR from 'swr';

interface Props {
  isLoading: boolean;
  schoolId: string;
}

export const withIndicators: React.Component = <P extends object>(
  WrappedComponent: React.ComponentType<P>
) => {
  return (props: P & Props) => {
    const { schoolId, isLoading, ...restProps } = props;
    const dispatch = useDispatch<Dispatch>();

    // const {
    //   data: faculties,
    //   error: fError,
    //   isValidating: fValidation,
    // } = useSWR(`/api/faculties/${schoolId}/list`, () =>
    //   loadFaculties(schoolId)
    // );

    // const {
    //   data: departments,
    //   error: dError,
    //   isValidating: dValidation,
    // } = useSWR(`/api/departments/${schoolId}/list`, () =>
    //   loadDepartments(schoolId)
    // );

    // const {
    //   data: statistics_faculties,
    //   error: sfError,
    //   isValidating: sfValidation,
    // } = useSWR(`/api/faculties/${schoolId}/stats`, () =>
    //   loadFacultiesStats(schoolId)
    // );

    // const {
    //   data: statistics_departments,
    //   error: sdError,
    //   isValidating: sdValidation,
    // } = useSWR(`/api/departments/${schoolId}/stats`, () =>
    //   loadDepartmentsStats(schoolId)
    // );

    // const {
    //   data: ranking,
    //   error: rError,
    //   isValidating: rValidation,
    // } = useSWR<SchoolStats>(`/api/schools/${schoolId}/stats`, () =>
    //   loadSchoolsStats(schoolId)
    // );

    // const {
    //   data: students,
    //   error: sError,
    //   isValidating: sValidation,
    // } = useSWR<SchoolInfo[]>(`/api/students/${schoolId}/list`, () =>
    //   loadStudents(schoolId)
    // );

    // const {
    //   data: statistics_students,
    //   error: stError,
    //   isValidating: stValidation,
    // } = useSWR(`/api/students/${schoolId}/stats`, () =>
    //   loadStudentsStats(schoolId)
    // );

    // const {
    //   data: lecturers,
    //   error: lError,
    //   isValidating: lValidation,
    // } = useSWR<AuthUserInfo[]>(`/api/lecturers/${schoolId}/list`, () =>
    //   loadLecturers(schoolId)
    // );

    // const {
    //   data: statistics_lecturers,
    //   error: ltError,
    //   isValidating: ltValidation,
    // } = useSWR(`/api/lecturers/${schoolId}/stats`, () =>
    //   loadLecturersStats(schoolId)
    // );

    useEffect(() => {
      dispatch.settings.setBusy(true);
      if (ranking) {
        dispatch.settings.setStatistics(ranking);
      }
      if (students) {
        dispatch.students.setStudents(students);
        dispatch.students.setStudentsCount(students?.length);
      }
      if (statistics_students) {
        dispatch.students.setStatistics(statistics_students);
        //Do other students maths and Stat Displays//
        dispatch.students.setAnalytics({
          STUDENT_TEACHER_RATIO: div(
            statistics_students.count as number,
            statistics_lecturers.count as number
          ),
          PERCENTAGE_FEMALE: perc(
            statistics_students.countFemale as number,
            statistics_students.count as number
          ),
          INTERNATIONAL_STUDENTS: perc(
            statistics_students.countIntl as number,
            statistics_students.count as number
          ),
          PERCENTAGE_CHALLANGED_STUDENTS: perc(
            statistics_students.countChallanged as number,
            statistics_students.count as number
          ),
          CHALLANGED_STUDENTS_RATIO: div(
            statistics_students.countChallanged as number,
            statistics_students.count as number
          ),
        });
        //Do other students maths and Stat Displays//
      }
      if (lecturers) {
        let lCts = lecturers;
        //Total GS //
        let totalGooglePresence = lCts.reduce(function (
          total: any,
          current: any
        ) {
          return total + current.googlePresence;
        },
        0);

        //Total Citation //
        let totalCitations = lCts.reduce(function (total: any, current: any) {
          return total + current.citations;
        }, 0);

        //Total Hindex //
        let totalHindex = lCts.reduce(function (total: any, current: any) {
          return total + current.hindex;
        }, 0);

        //Total Hindex //
        let totalI10hindex = lCts.reduce(function (total: any, current: any) {
          return total + current.i10hindex;
        }, 0);

        dispatch.settings.setRank({
          googlePresence: totalGooglePresence,
          citations: totalCitations,
          hindex: totalHindex,
          i10hindex: totalI10hindex,
        });
        const _total =
          totalGooglePresence + totalCitations + totalHindex + totalI10hindex;
        dispatch.settings.setTotal(_total);
        dispatch.lecturers.setLecturers(lecturers);
        dispatch.lecturers.setLecturersCount(lecturers.length);
      }
      if (statistics_lecturers) {
        dispatch.lecturers.setStatistics(statistics_lecturers);
        //Do other lecturers maths and Stat Displays//
        dispatch.lecturers.setAnalytics({
          INTERNATIONAL_LECTURERS: perc(
            statistics_lecturers.countIntl as number,
            statistics_lecturers.count as number
          ),
          FEMALE_LECTURERS: perc(
            statistics_lecturers.countFemale as number,
            statistics_lecturers.count as number
          ),
          PROFESSORS: perc(
            statistics_lecturers.countProfessors as number,
            statistics_lecturers.count as number
          ),
          FULL_PROFESSORS: perc(
            statistics_lecturers.countFullProfessors as number,
            statistics_lecturers.count as number
          ),
          INTERNATIONAL_PROFESSORS: perc(
            statistics_lecturers.countIntlProfessors as number,
            statistics_lecturers.count as number
          ),
          FEMALE_PROFESSORS: perc(
            statistics_lecturers.countProfessorsFemale as number,
            statistics_lecturers.count as number
          ),
          MALE_PROFESSORS: perc(
            statistics_lecturers.countProfessorsMale as number,
            statistics_lecturers.count as number
          ),
          PHD_LECTURERS: perc(
            statistics_lecturers.countPHDLecturers as number,
            statistics_lecturers.count as number
          ),
          ADJUNCT_LECTURERS: perc(
            statistics_lecturers.countAdjunct as number,
            statistics_lecturers.count as number
          ),
          ADJUNCT_PROFESSORS: perc(
            statistics_lecturers.countAdjunctProfessors as number,
            statistics_lecturers.count as number
          ),
          PERCENTAGE_JUNIOR_LECTURERS: perc(
            statistics_lecturers.countJuniorLecturers as number,
            statistics_lecturers.count as number
          ),
          PERCENTAGE_SENIOR_LECTURERS: perc(
            statistics_lecturers.countSeniorLecturers as number,
            statistics_lecturers.count as number
          ),
          JUNIO_SENIOR_LECTURERS_RATIO: div(
            statistics_lecturers.countJuniorLecturers as number,
            statistics_lecturers.countSeniorLecturers as number
          ),
        });
        //Do other lecturers maths and Stat Displays//
      }
      if (faculties) {
        dispatch.faculties.setFaculties(faculties);
        dispatch.faculties.setFacultiesCount(faculties.length);
      }
      if (departments) {
        dispatch.departments.setDepartments(departments);
        dispatch.departments.setDepartmentsCount(departments.length);
      }
      if (statistics_faculties) {
        dispatch.faculties.setStatistics(statistics_faculties);
        //Do other faculties maths and Stat Displays//
        dispatch.faculties.setAnalytics({});
        //Do other faculties maths and Stat Displays//
      }
      if (statistics_departments) {
        dispatch.faculties.setStatistics(statistics_departments);
        dispatch.departments.setAnalytics({
          FULL_ACCREDITATION: perc(
            statistics_departments.countAccredited as number,
            statistics_departments.count as number
          ),
        });
      }

      dispatch.settings.setBusy(false);
    }, [schoolId]);

    const othersStillLoading =
      rValidation ||
      rError ||
      sValidation ||
      sError ||
      stValidation ||
      stError ||
      lValidation ||
      lError ||
      ltValidation ||
      ltError;

    return isLoading ? (
      <div className="container my-[10%] text-center">
        <h1>Loading indicators, wait...</h1>
      </div>
    ) : (
      <WrappedComponent {...(restProps as P)} ranking={ranking} />
    );
  };
};
